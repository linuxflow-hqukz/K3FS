---
kind: ConfigMap
apiVersion: v1
metadata:
  name: disktools
  namespace: {{ .Values.Common.namespace | default "k3fs"  }}
data:
  disktools.sh: |-
    #! /bin/bash
    SystemDisk=$(lsblk | grep -B 1 root | head -1 | awk '{print $1}' |  awk -F 'p' '{print $1}' |  sed 's/^[^[:alnum:]]*//')
    if (( ReplicationFactor <= StorageNodeNum )); then
        if (( StripSize <= (StorageNodeNum * DiskPerNode) )); then
            if [[ "${DeployMode}" == "default" ]]; then
                if [[ "${StorageType}" == "dir" ]]; then
                    for i in $(seq 1 "$DiskPerNode"); do
                        mkdir -p "/mnt/data$(printf "%02d" "$i")/3fs"
                    done
                elif [[ "${StorageType}" == "disk" ]]; then
                    lsblk -d -n -o NAME,TYPE,SIZE | grep -i "nvme" | grep -i "disk" | awk '{print $1}'|sort -V | grep -v $SystemDisk > /tmp/all_disk.txt
                    for disk in $(cat /tmp/all_disk.txt);do 
                        PartNum=$(lsblk | grep ${disk} | wc -l)
                        if (( PartNum > 1 )); then
                            echo "Disk ${disk} is partitioned."
                        else 
                            echo ${disk} >> /tmp/disk.txt
                        fi
                    done 
                    DiskNum=$(cat /tmp/disk.txt | wc -l)
                    if (( DiskNum >= DiskPerNode ));then
                        for i in $(seq 1 $DiskPerNode); do
                            DiskMountPoint=/mnt/data$(printf "%02d" "$i")
                            echo  ${DiskMountPoint} 
                            mkdir -p ${DiskMountPoint} 
                            StorageDisk=$(cat /tmp/disk.txt | head -$i | tail -1)
                            echo "StorageDisk: ${StorageDisk}"
                            mkfs.xfs -L 3fs -s size=4096 -f /dev/${StorageDisk}
                            mount /dev/${StorageDisk} ${DiskMountPoint}
                            mkdir -p ${DiskMountPoint}/3fs
                        done
                    else
                       echo "The DiskNum: ${DiskNum} is less than the number set by DiskPerNode: ${DiskPerNode} !"
                       exit 1
                    fi
                else 
                    echo "StorageType: ${StorageType} invalid value, Please use 'dir' or 'disk'."
                    exit 1
                fi
            elif [[ "${DeployMode}" == "custom" ]]; then
                if [[ "${StorageType}" == "dir" ]]; then
                    echo "StorageType: ${StorageType} invalid value, custom mode does not support the 'dir', Please use 'nvme' instead."
                elif [[ "${StorageType}" == "disk" ]]; then
                    echo "${disk}" | sed -e "s|\[||g" -e "s|\]||g" -e "s|,|\n|g" > /tmp/disk_${DiskIdType}.txt
                    DiskNum=$(cat /tmp/disk_${DiskIdType}.txt | grep -v "^$" | wc -l)
                    if (( DiskNum >= DiskPerNode ));then
                        for i in $(seq 1 $DiskPerNode); do
                            DiskMountPoint=/mnt/data$(printf "%02d" "$i")
                            mkdir -p ${DiskMountPoint}
                            DiskVar=$(cat /tmp/disk_${DiskIdType}.txt | head -${i} | tail -1 | sed "s|\"||g")
                            echo "DiskVar: ${DiskVar}"
                            StorageDisk=$(ls -l /dev/disk/by-${DiskIdType} | grep $DiskVar | awk '{print $NF}' | sed 's/^[^[:alnum:]]*//')
                            echo "StorageDisk: ${StorageDisk}"
                            if [ -n "${StorageDisk}" ]; then
                                if [[ "${DiskIdType}" == "id" ]]; then
                                    mkfs.xfs -L 3fs -s size=4096 -f /dev/${StorageDisk}
                                elif [[ "${DiskIdType}" == "uuid" ]] || [[ "${DiskIdType}" == "partuuid" ]]; then
                                    if [[ "$ClearDisk" == "true" ]];then
                                        mkfs.xfs -L 3fs -s size=4096 -f /dev/${StorageDisk}
                                        max_attempts=10
                                        attempt=1
                                        while [ $attempt -le $max_attempts ]; do
                                            if blkid -c /dev/null "/dev/${StorageDisk}" | grep -q 'TYPE="xfs"'; then
                                                echo "Disk /dev/${StorageDisk} is XFS."
                                                break
                                            else
                                                echo "Try formatting /dev/${StorageDisk} the number of attempts: $attempt"
                                                mkfs.xfs -L 3fs -s size=4096 -f "/dev/${StorageDisk}"
                                                if [ $? -ne 0 ]; then
                                                    echo "Number of format failed: $attempt"
                                                fi
                                                attempt=$((attempt + 1))
                                                if [ $attempt -gt $max_attempts ]; then
                                                    echo "Error: Exceeded maximum retry attempts($max_attempts), format failed."
                                                    exit 1
                                                fi
                                            fi
                                        done
                                        while true;do
                                            xfs_admin -U $DiskVar /dev/${StorageDisk}
                                            xfs_result=$(ls -l /dev/disk/by-${DiskIdType} | grep $DiskVar)
                                            if [ -n "$xfs_result" ]; then
                                                echo "$xfs_result"
                                                echo "${DiskIdType} is restored ."
                                                break
                                            else 
                                                echo "${DiskIdType} not restored !"
                                                sleep 3
                                            fi
                                        done
                                    fi
                                else 
                                    echo "DiskIdType invalid value, Please use 'id' 'uuid' 'partuuid'."
                                    exit 1
                                fi
                                max_attempts=10
                                attempt=1
                                mount /dev/${StorageDisk} ${DiskMountPoint}
                                while [ $attempt -le $max_attempts ]; do
                                    if df -h | grep ${DiskMountPoint}; then
                                        echo "Disk /dev/${StorageDisk} is mount."
                                        mkdir -p ${DiskMountPoint}/3fs
                                        break
                                    else
                                    echo "Try mounttting /dev/${StorageDisk} the number of attempts: $attempt"
                                        mount /dev/${StorageDisk} ${DiskMountPoint}
                                        if [ $? -ne 0 ]; then
                                            echo "Number of mount failed: $attempt"
                                        fi
                                        attempt=$((attempt + 1))
                                        if [ $attempt -gt $max_attempts ]; then
                                            echo "Error: Exceeded maximum retry attempts($max_attempts), mount failed."
                                            exit 1
                                        fi
                                    fi
                                done
                            else
                                echo "Not found device, ${DiskIdType}: ${StorageDisk} !"
                                exit 1
                            fi
                        done
                        df -h
                    else
                        echo "The DiskNum: ${DiskNum} is less than the number set by DiskPerNode: ${DiskPerNode} !"
                        exit 1
                    fi
                else
                    echo "StorageType:${StorageType} invalid value, Please use 'disk' in custom deploymode."
                    exit 1
                fi
            else 
                echo "DeployMode:${DeployMode} invalid value, Please use 'dir' or 'disk'. "
                exit 1
            fi
        else
            echo "StripSize:${StripSize} must be less than (StorageNodeNum * DiskPerNode)."
            exit 1
        fi
    else
        echo "ReplicationFactor: ${ReplicationFactor} must be less than StorageNodeNum: {StorageNodeNum}."
        exit 1
    fi
