---
kind: ConfigMap
apiVersion: v1
metadata:
  name: check
  namespace: {{ .Values.Common.namespace | default "k3fs"  }}
data:
  check.sh: |-
    #!/bin/bash

    max_wait_time=60

    timeout(){
    if (( i==${max_wait_time} )); then
      echo "Not get value, timeout and exit." 
      exit 1
    fi
    }

    get_rdma_status(){

        if [[ "$NetworkType" == "rdma" ]]; then
            Module=rdma_cm
        elif [[ "$NetworkType" == "rxe" ]]; then
            Module=rdma_rxe
        else
            echo "NetworkType invalid value, Please use 'rdma' or 'rxe'."
        fi

        for ((i=1; i<=${max_wait_time}; i++)); do
            result=$(lsmod | grep ${Module})
            if [ -n "$result" ]; then
                echo "${Module} module has been loaded！"
                echo $result
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "${Module} module not load, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
        for ((i=1; i<=${max_wait_time}; i++)); do
            result=$(rdma link show | grep ${NetworkCard})
            if [ -n "$result" ]; then
                echo "rdma link is ready！"
                echo $result
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "rdma link is not ready, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
    }

    # kubectl
    get_configmap_status(){
        for ((i=1; i<=${max_wait_time}; i++)); do
            status=$(kubectl  get configmaps -n ${NameSpace} ${ConfigMapName} -o yaml | grep ConfigMapStatus | sed  's|"||g' | awk -F ": " '{print $2}' )
            if [ "$status" = "READY" ]; then
                echo "ConfigMapStatus: ${status}"
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "ConfigMap status is not ready, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
    }

    get_remote_ip(){
        for ((i=1; i<=${max_wait_time}; i++)); do
            REMOTE_IP=$(kubectl  get configmaps -n ${NameSpace} ${ConfigMapName} -o yaml | grep REMOTE_IP | sed  's|"||g' | awk -F ": " '{print $2}' )
            if [ -n "$REMOTE_IP" ]; then
                echo "REMOTE_IP: ${REMOTE_IP}"
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "ConfigMap REMOTE_IP is not ready, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
    }

    get_mgmtd_server(){
        for ((i=1; i<=${max_wait_time}; i++)); do
            MGMTD_SERVER_ADDRESSES=$(kubectl  get configmaps -n ${NameSpace} ${ConfigMapName} -o yaml | grep MGMTD_SERVER_ADDRESSES | sed  's|"||g' | awk -F ": " '{print $2}' )
            if [ -n "$MGMTD_SERVER_ADDRESSES" ]; then
                echo "MGMTD_SERVER_ADDRESSES: ${MGMTD_SERVER_ADDRESSES}"
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "ConfigMap MGMTD_SERVER_ADDRESSES is not ready, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
    }

    get_init_status(){
        for ((i=1; i<=${max_wait_time}; i++)); do
            status=$(kubectl get configmap -n ${NameSpace} ${ConfigMapName} -o yaml | grep INIT_STATUS | awk '{print $2}')
            if [ "$status" = "FINISHED" ]; then
                echo "INIT_STATUS: ${status}"
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "Init status is not ready, waited ${wait_time}s."
                timeout
            fi
        done
    }

    get_token(){
        for ((i=1; i<=${max_wait_time}; i++)); do
            token=$(kubectl  get configmaps -n ${NameSpace} ${ConfigMapName} -o yaml | grep TOKEN | sed  's|"||g' | awk -F ": " '{print $2}' )
            if [ -n "$token" ]; then
                echo "token: ${token}"
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "token is not ready, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
    }

    # 3fs
    get_mgmtd_status(){
        for ((i=1; i<=${max_wait_time}; i++)); do
            NodeNumTMP=$(/opt/3fs/bin/admin_cli -cfg /opt/3fs/etc/admin_cli.toml "list-nodes" | grep "MGMTD" | wc -l)
            if (( NodeNumTMP == MgmtdNodeNum ));then
                echo "NodeNumTMP: ${NodeNumTMP} , MgmtdNodeNum: ${MgmtdNodeNum} , Mgmtd is ready."
                sleep 10
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "Mgmtd is not ready, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
    }

    get_meta_status(){
        for ((i=1; i<=${max_wait_time}; i++)); do
            NodeNumTMP=$(/opt/3fs/bin/admin_cli -cfg /opt/3fs/etc/admin_cli.toml "list-nodes" | grep "META" | wc -l)
            if (( NodeNumTMP == MetaNodeNum ));then
                echo "NodeNumTMP: ${NodeNumTMP} , MetaNodeNum: ${MetaNodeNum} , Meta is ready."
                sleep 10
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "Meta is not ready, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
    }

    get_storage_status(){
        for ((i=1; i<=${max_wait_time}; i++)); do
            NodeNumTMP=$(/opt/3fs/bin/admin_cli -cfg /opt/3fs/etc/admin_cli.toml "list-nodes" | grep "STORAGE" | wc -l)
            if (( NodeNumTMP == StorageNodeNum ));then
                echo "NodeNumTMP: ${NodeNumTMP} , StorageNodeNum: ${StorageNodeNum} , Storage is ready."
                sleep 10
                break
            else
                sleep 10
                wait_time=$((i * 10))
                echo "Storage is not ready, the job has already waited ${wait_time} seconds."
                timeout
            fi
        done
    }


    case "$1" in
    get_rdma_status)
        get_rdma_status
        ;;
    get_configmap_status)
        get_configmap_status
        ;;
    get_init_status)
        get_init_status
        ;;
    get_remote_ip)
        get_remote_ip
        ;;
    get_mgmtd_server)
        get_mgmtd_server
        ;;
    get_token)
        get_token
        ;;
    get_mgmtd_status)
        get_mgmtd_status
        ;;
    get_meta_status)
        get_meta_status
        ;;
    get_storage_status)
        get_storage_status
        ;;
    *)
        echo "Unknown parameter: $1"
        echo "Parameter: get_rdma_status|get_configmap_status|get_init_status|get_remote_ip|get_mgmtd_server|get_token|get_mgmtd_status|get_meta_status|get_storage_status"
        ;;
    esac