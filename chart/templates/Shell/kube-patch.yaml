---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-patch
  namespace: {{ .Values.Common.namespace | default "k3fs"  }}
data:
  kube-patch.sh: |-
    #!/bin/bash

    patch_init_status(){
        result=$(kubectl patch configmap -n ${NameSpace} ${ConfigMapName} -p "$(jq -n '{data: {INIT_STATUS: "FINISHED"}}')")
        echo $result
        kubectl get configmap -n ${NameSpace} ${ConfigMapName} -o yaml | grep INIT_STATUS
    }

    patch_remote_ip(){
        REMOTE_IP=${MonitorHost}:${MonitorPort}
        result=$(kubectl patch configmap -n ${NameSpace} ${ConfigMapName} -p "$(jq -n --arg remote_ip "${REMOTE_IP}" '{data: {REMOTE_IP: $remote_ip}}')")
        echo $result
        kubectl get configmap -n ${NameSpace} ${ConfigMapName} -o yaml | grep REMOTE_IP
    }

    patch_mgmtd_server(){
        NodeId=$(echo $POD_NAME  |  awk -F '-' '{print $2}')
        if (( NodeId == MgmtdNodeNum ));then
            for ((i=1; i<=60; i++)); do
                MgmtdInfo=$(kubectl get pod -n ${NameSpace} -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.status.podIP}{"\n"}{end}' | grep mgmtd | awk '{print $2}'> /tmp/mgmtd_info.txt)
                MgmtdNodeNumTmp=$(cat /tmp/mgmtd_info.txt | grep -v '^$' | wc -l)
                if (( MgmtdNodeNumTmp == MgmtdNodeNum ));then
                    echo "MgmtdNodeNumTmp: $MgmtdNodeNumTmp, MgmtdNodeNum: $MgmtdNodeNum, Mgmtd is ready."
                    sed -i "s/$/:${MgmtdRdmaPort}/" /tmp/mgmtd_info.txt
                    MGMTD_SERVER_ADDRESSES=$(awk '{print "\"RDMA://" $1 "\""}' /tmp/mgmtd_info.txt | paste -sd, | awk '{print "[" $0 "]"}')
                    echo ${MGMTD_SERVER_ADDRESSES}
                    result=$(kubectl patch configmap -n ${NameSpace} ${ConfigMapName} -p "$(jq -n --arg addr "$MGMTD_SERVER_ADDRESSES" '{data: {MGMTD_SERVER_ADDRESSES: $addr}}')")
                    echo $result
                    kubectl get configmap -n ${NameSpace} ${ConfigMapName} -o yaml | grep MGMTD_SERVER_ADDRESSES
                    break
                else
                    sleep 10
                    wait_time=$((i * 10))
                    echo "MgmtdNodeNumTmp: $MgmtdNodeNumTmp, MgmtdNodeNum: $MgmtdNodeNum.MgmtdNodeNum is not ready, the job has already waited ${wait_time} seconds."
                fi
            done
        fi
    }

    patch_token(){
        TOKEN=$(cat /shared-data/token.txt)
        result=$(kubectl patch configmap -n ${NameSpace} ${ConfigMapName} -p "$(jq -n --arg token "${TOKEN}" '{data: {TOKEN: $token}}')")
        echo $result
        kubectl get configmap -n ${NameSpace} ${ConfigMapName} -o yaml | grep TOKEN
    }

    case "$1" in
    patch_init_status)
        patch_init_status
        ;;
    patch_remote_ip)
        patch_remote_ip
        ;;
    patch_mgmtd_server)
        patch_mgmtd_server
        ;;
    patch_token)
        patch_token
        ;;
    *)
        echo "Unknown parameter: $1"
        echo "Parameter: patch_init_status|patch_remote_ip|patch_mgmtd_server|patch_token"
        ;;
    esac